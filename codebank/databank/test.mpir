
using "anothertest.mpir"

funcdef divide :: TypeInt, TypeInt â†’ TypeInt
funcdef divide ðŸ”¥, y = ðŸ”¥ / y
suchthat:
    |    doc ðŸ”¥ as "First Integer"
    |    doc y as "Second Integer"
    |    doc as "Function to divide 2 numbers"
end

funcdef multiply_show :: TypeInt, TypeInt  â†’ TypeInt
funcdef multiply_show x y
    let z as TypeInt
    set z as 5

    let x as TypeInt2
    set x as 0

    trycast z into x
    on 1 -> set z as 1

    do call(z, a)
    on 5 -> set z as 2

    return(z)

suchthat:
    |    doc x as "First Integer"
    |    doc y as "Second Integer"
    |    doc z as "Product of X & Y"
    |    doc as "Function to show product of 2 integers"
end

typedef NewInt a :: Int {a > 5 ^ a == 10}
