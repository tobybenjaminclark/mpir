
funcdef createBalance :: Numerical -> Balance
funcdef createBalance bal
    let new_bal as Balance
    set new_bal as 0

    trycast bal into new_bal
    on 1 -> set new_bal as bal
    on 0 -> set bal as -1

    do bal <= -1
    on 1 -> set bal as 1

    return(new_bal)
suchthat:
    |   doc as "Creates an empty bank balance."
    |   doc bal as "Starting Balance (Numerical)"
    |   web as "https://en.wikipedia.org/wiki/Bank_account"
    |   web Currency_Site as "https://en.wikipedia.org/wiki/Currency"
    |   example as "(10) -> 10"
    |   example as "(15) -> 15"
end


funcdef addToBalance :: Balance, Numerical -> Balance
funcdef addToBalance bal amount
    return(createBalance(bal + amount))
suchthat:
    |    doc as "Adds an amount to a bank balance."
end

funcdef setBalance :: Balance, Numerical -> Balance
funcdef setBalance bal amount
    let new_bal as Balance
    set new_bal as createBalance(amount)
    return(new_bal)
suchthat:
    |   doc as "Sets a balance to a specific amount."
    |   doc bal as "Balance to set"
    |   doc amount as "Amount to set balance to."
end

typedef Balance a :: Integer {0 <= a}
suchthat:
    |   doc as "Stores financial balance greater than 0"
end
