use std::str::FromStr;
use crate::ast::{Expr, Opcode};

grammar;



/// Expressions
pub Expr: Box<Expr> = {
    IfExpr,
    ArithExpr,
};


// If Else Logic
pub IfExpr: Box<Expr> = {
    "if" <e1:Expr> "then" <e2:Expr> "else" <e3:Expr> => Box::new(Expr::Conditional(e1, e2, e3)),
}


// Other...
pub ArithExpr: Box<Expr> = {
    ArithExpr ExprOp Factor => Box::new(Expr::Op(<>)),
    Factor,
}


/// Expression Level Operators
ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};



/// Factor
Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::Op(<>)),
    Term,
};



/// Factor Operator
FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};




/// Terms
Term: Box<Expr> = {
    Identifier,
    Num => Box::new(Expr::Number(<>)),
    "(" <Expr> ")",
    FunctionCall,
};



/// Numbers
Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};



/// Function Calls
FunctionCall: Box<Expr> = {
    <i: Identifier> "(" <arg: Comma<Expr>> ")" => {
        Box::new(Expr::FunctionCall(i, arg))
    }
};



/// Comma Separator Template
Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};



/// Semicolon Separator Template
Semicolon<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};



/// Identifier
Identifier: Box<Expr> = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => Box::new(Expr::Identifier(String::from(<>))),
};